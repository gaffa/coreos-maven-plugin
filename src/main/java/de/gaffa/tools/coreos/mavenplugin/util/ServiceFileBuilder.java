package de.gaffa.tools.coreos.mavenplugin.util;

import com.google.common.io.Files;
import de.gaffa.tools.coreos.mavenplugin.type.ServiceName;
import org.apache.commons.lang3.StringUtils;
import org.apache.maven.plugin.MojoExecutionException;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

public class ServiceFileBuilder {

    private static File buildServiceFile(int instances, File baseDir, ServiceName serviceName, String dockerImageName, String dockerRunOptions, String xFleetOptions, String dockerHubUser, String dockerHubPass) throws IOException {

        File serviceFile = new File(baseDir.getAbsolutePath() + File.separator + serviceName.getFullName());

        PrintWriter writer = new PrintWriter(serviceFile, "UTF-8");
        writer.println("[Unit]");
        writer.println("Description=" + serviceName.getName() + " (File generated by coreos-maven-plugin)");
        writer.println("After=docker.service");
        writer.println("Requires=docker.service");
        writer.println("");
        writer.println("[Service]");
        writer.println("TimeoutStartSec=0");
        writer.println("ExecStartPre=-/usr/bin/docker kill " + serviceName.getName());
        writer.println("ExecStartPre=-/usr/bin/docker rm " + serviceName.getName());
        if (!StringUtils.isBlank(dockerHubUser) && !StringUtils.isBlank(dockerHubPass)) {
            writer.println("ExecStartPre=-/usr/bin/docker login -e coreos@maven.org -u " + dockerHubUser + " -p " + dockerHubPass);
        }
        writer.println("ExecStartPre=/usr/bin/docker pull " + dockerImageName);
        writer.println("ExecStart=/usr/bin/docker run " + dockerRunOptions + " --name=" + serviceName.getName() + " " + dockerImageName);
        writer.println("ExecStop=/usr/bin/docker stop " + serviceName.getName());
        writer.println("");
        writer.println("[Install]");
        writer.println("WantedBy=multi-user.target");
        writer.println();
        writer.println("[X-Fleet]");

        // custom x-fleet options (eg an explicit host to deploy to, deploy to all hosts)
        if (!StringUtils.isBlank(xFleetOptions)) {
            writer.println(xFleetOptions);
        }

        if (instances > 1) {
            // never run two instances of the service on the same host
            writer.println("Conflicts=" + serviceName.getName() + ".*.service");
        }
        writer.close();

        return serviceFile;
    }

    public static List<File> build(int instances, String serviceName, String dockerImageName, String dockerRunOptions, String xFleetOptions, String dockerHubUser, String dockerHubPass) throws MojoExecutionException {

        File baseDir = Files.createTempDir();
        List<File> serviceFiles = new ArrayList<>();
        for (int i = 0; i < instances; i++) {
            try {
                serviceFiles.add(buildServiceFile(instances, baseDir, new ServiceName(serviceName, i + 1), dockerImageName, dockerRunOptions, xFleetOptions, dockerHubUser, dockerHubPass));
            } catch (IOException e) {
                throw new MojoExecutionException("Exception generating service file", e);
            }
        }
        return serviceFiles;
    }
}
